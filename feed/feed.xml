<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Jonathan Schrack</title>
	<subtitle></subtitle>
	
	<link href="https://jmschrack.dev/feed/feed.xml" rel="self"/>
	<link href="https://jmschrack.dev/"/>
	<updated>2020-07-20T00:00:00+00:00</updated>
	<id></id>
	<author>
		<name>Jonathan Schrack</name>
		<email>jonathan.schrack@digitalprecept.com</email>
	</author>
	
	<entry>
		<title>Sanity Razor</title>
		<link href="https://jmschrack.dev/posts/SanityRazor/"/>
		<updated>2016-02-24T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/SanityRazor/</id>
		<content type="html">&lt;p&gt;This was the first project I worked on at Digital Precept. Development was on a Oculus DK2 and Unity5. The game is best described as &amp;quot;Steel Batallion vs Call of Cthulhu.&amp;quot;&lt;br&gt;
It was first demoed at PAX:South 2016 with great praise from the players who tried it.&lt;br&gt;
However, this was still the halcyon days of VR development and our basic training demo was pushing the system to its limits to hit 90FPS, and so the studio made the decision to stop working on it for now.&lt;/p&gt;
&lt;p&gt;The project is not considered cancelled as the studio would like to revisit the idea in the future; the project&#39;s status is &amp;quot;on ice.&amp;quot;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;quot;That is not dead which can eternal lie. And with strange aeons even death may die.&amp;quot; - &lt;em&gt;Call of Cthulhu&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;the-greenlight-trailer&quot;&gt;The Greenlight Trailer &lt;a class=&quot;direct-link&quot; href=&quot;#the-greenlight-trailer&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/UsRlwK7xg_s&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h1 id=&quot;novel-features&quot;&gt;Novel features &lt;a class=&quot;direct-link&quot; href=&quot;#novel-features&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;At time of writing, it&#39;s 2020. Many of these features are trivial or easy now that the XR industry has had 4 years to mature.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We had a monoscopic HUD that only rendered on your left eye. This allowed use to render targeting pips for ease of aiming and enemy awareness.&lt;br&gt;
Dual camera setups in Unity3D were prohibitively expensive, and we didn&#39;t want to deal with &amp;quot;impossible geometry&amp;quot; by rendering the HUD as floating 3D elements.&lt;/p&gt;
&lt;p&gt;The simple solution:  render it like a real world HUD. The Entirety of the HUD is rendered roughly 1.5 inches to the left of the camera&#39;s center point. Or roughly 1 inch in front of your (virtual) eyeball.&lt;br&gt;
The SinglePass Stereo translation math would naturally occlude this from the right eye.&lt;br&gt;
Furthermore, there is only one world space canvas with all elements including the cockpit displays attached to it. This keeps all the UI drawcalls to a single batch.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Unity3D AMF-Importer</title>
		<link href="https://jmschrack.dev/posts/UnityAMFImporter/"/>
		<updated>2019-02-04T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/UnityAMFImporter/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https://jmschrack.dev/img/AMFImporter.png&quot; alt=&quot;alt text&quot; title=&quot;Adjutant to Unity&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;the-impetus&quot;&gt;The impetus &lt;a class=&quot;direct-link&quot; href=&quot;#the-impetus&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I wanted to test the efficiency of rendering a FPS multiplayer map on some low end hardware. So I started to make a map when I realized, why waste time on a theoretical map, when I could use an existing map from an FPS? Then I recalled that I used to play a lot of Halo:CE in college.  Not &amp;quot;Combat Evolved&amp;quot; but &amp;quot;&lt;em&gt;Custom Edition&lt;/em&gt;&amp;quot;.&lt;/p&gt;
&lt;p&gt;Custom Edition had tools that allowed the community to create custom levels, maps, guns, etc. But I didn&#39;t want to use someone else&#39; map; I wanted to use one of the official maps as a benchmark for my performance test. So I did some research and came across a fan made tool called &amp;quot;Adjutant&amp;quot; that lets you extract geometry and textures from the Halo map files. Even better it supported Halo 3 assets! So I open up &amp;quot;Isolation&amp;quot; multiplayer map from Halo 3. Extract the textures as PNGs and extract the model as... AMF?&lt;/p&gt;
&lt;h2 id=&quot;down-the-rabbit-hole...&quot;&gt;Down the rabbit hole... &lt;a class=&quot;direct-link&quot; href=&quot;#down-the-rabbit-hole...&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So the Adjutant mod team had created their own model file format to extract as.  They then provided an import script plugin for 3DS...2005.  I don&#39;t own 3DS Max, much less the older precursor. So I started investigating if anyone had made a Blender plugin that could import AMF.  No one had. Most of the documentation and mod posts I was finding for Halo:CE were circa 2003 at best. However, by chance I ran across a forum post dated late 2018 of someone talking about making a Blender plugin.&lt;/p&gt;
&lt;p&gt;Huge shoutout to Shelley and the rest of the folks over on the Reclaimers discord. Shelley had a decompiled version of the 3DS importer plugin. With this, I was able to write my own C# importer to allow Unity to import AMF files natively as if they were 3D models! ...almost.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://jmschrack.dev/img/IsolationFubar.png&quot; alt=&quot;alt text&quot; title=&quot;Isolation messed up&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;geometry&quot;&gt;Geometry &lt;a class=&quot;direct-link&quot; href=&quot;#geometry&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Huge thanks to &lt;a href=&quot;https://www.linkedin.com/in/kimberly-duran-80b16b149/&quot;&gt;Kim Duran&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.linkedin.com/in/hunter-gore-9960b0148&quot;&gt;Hunter Gore&lt;/a&gt; for helping me with matrix transform math!&lt;/p&gt;
&lt;p&gt;Halo/3DS uses a right handed, z-up coordinate system, while Unity uses a left-handed Y-up system.  Converting between the two ended up being slightly trickier than it should have been. As the coordinates would be extracted from the raw AMF file, but then certain modifiers and transforms would be applied based on the geometry name.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/IsolationFubar2.png&quot; alt=&quot;alt text&quot; title=&quot;Isolation partially correct&quot;&gt;&lt;/p&gt;
&lt;p&gt;Thankfully, geometry falls into two catergories of terrain or instances.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/IsolationFixedGeo.png&quot; alt=&quot;alt text&quot; title=&quot;Isolation slightly less messed up&quot;&gt;&lt;br&gt;
...But what&#39;s up with the crushed blacks?&lt;/p&gt;
&lt;h2 id=&quot;materials&quot;&gt;Materials &lt;a class=&quot;direct-link&quot; href=&quot;#materials&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The AMF file format has data in it for setting up textures and materials into the shaders. Every material has an array of textures, colors, and normal maps. Unfortunately the 3DS importer script does not support anything other than a basic diffuse set up. However, looking at the textures referenced, the AMF file would preserve indexes and leave in null fields. So a pattern can be observed with what texture indexes are albedo, normals, color change, and lighting.&lt;br&gt;
That get&#39;s us about 75% of the way there, but we still have these weird, crushed black looking materials.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/crushedBlackRock.png&quot; alt=&quot;alt text&quot; title=&quot;Rocks with Crushed Black&quot;&gt;&lt;br&gt;
That ends up being an easy fix.  The textures have been pre-converted to linear colorspace, but by default Unity (and everything else) imports the texture as Gamma and then converts to linear. So changing the texture&#39;s sRGB setting to false fixed the colors and gets shadows to play nice as well!&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/RocksInShade.png&quot; alt=&quot;alt text&quot; title=&quot;Fixed rocks&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;rigged-importing&quot;&gt;Rigged Importing &lt;a class=&quot;direct-link&quot; href=&quot;#rigged-importing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It even works with rigged meshes, but that was whole other process of figuring out the right transforms to apply at certain steps. I saved a few screenshots of the more interesting steps in the process.&lt;/p&gt;
&lt;p&gt;The correct skeleton is on the left. That wadded up ball of lines? That&#39;s the imported skeleton.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/MCRig1.png&quot; alt=&quot;alt text&quot; title=&quot;Wadded up ball of skeleton&quot;&gt;&lt;/p&gt;
&lt;p&gt;Skeleton is looking right, except it took a long walk off a short cliff.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/MCRig2.png&quot; alt=&quot;alt text&quot; title=&quot;Skeleton sleeping on the job&quot;&gt;&lt;/p&gt;
&lt;p&gt;Skeleton is right, but the 3D mesh is not?&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/MCRig3.png&quot; alt=&quot;alt text&quot; title=&quot;Almost there&quot;&gt;&lt;/p&gt;
&lt;p&gt;Skeleton and mesh imports properly, except a basic idle animation results in MasterChief about to drop the hottest rap album of 2020.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/MCRigAnim1.gif&quot; alt=&quot;alt text&quot; title=&quot;MC is bit too gangsta&quot;&gt;&lt;/p&gt;
&lt;p&gt;Easy enough, adjusting MC to be in a T-Pose corrects the avatar&#39;s limb rotations.&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/MCRigAnimFinal.gif&quot; alt=&quot;alt text&quot; title=&quot;perfect&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;the-end-result&quot;&gt;The End Result &lt;a class=&quot;direct-link&quot; href=&quot;#the-end-result&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Is a pretty servicable importer for AMF files into Unity! It&#39;s not perfect, but neither is AMF.&lt;/p&gt;
&lt;p&gt;The full source code is on GitHub:&lt;/p&gt;
&lt;div class=&quot;github-card&quot; data-github=&quot;jmschrack/Unity3D-AMFImporter&quot; data-width=&quot;400&quot; data-height=&quot;153&quot; data-theme=&quot;default&quot;&gt;&lt;/div&gt;
&lt;script src=&quot;https://cdn.jsdelivr.net/github-cards/latest/widget.js&quot;&gt;&lt;/script&gt;
&lt;h1 id=&quot;wait-what-about-that-render-test%3F&quot;&gt;Wait what about that Render test? &lt;a class=&quot;direct-link&quot; href=&quot;#wait-what-about-that-render-test%3F&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;4 player splitscreen hit max frame rate 30FPS on an android tablet. (Screen is locked at VSync. Judging by the CPU stats, it could feasible hit 50+FPS without VSync)&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/7W2QDMUuvdY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
</content>
	</entry>
	
	<entry>
		<title>BTLE 4 Unity</title>
		<link href="https://jmschrack.dev/posts/BLE4Unity/"/>
		<updated>2019-02-28T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/BLE4Unity/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https://jmschrack.dev/img/BTLE4Unity.jpg&quot; alt=&quot;alt text&quot; title=&quot;BTLE4Unity Title Card&quot;&gt;&lt;/p&gt;
&lt;p&gt;I designed and developed a Bluetooth Low Energy integration for Unity!&lt;br&gt;
Nicknamed BTLE4Unity aka &amp;quot;Beetle&amp;quot;&lt;/p&gt;
&lt;p&gt;The asset is broken into multiple parts for cross platform utilization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Core API: this is the high level interface that all platforms must implement&lt;/li&gt;
&lt;li&gt;Win API: this wraps the low level Windows SDK Bluetooth calls with C# headers and utilities.&lt;/li&gt;
&lt;li&gt;WebGL API: this wraps the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Web_Bluetooth_API&quot;&gt;Javascript Bluetooth implementation&lt;/a&gt; spec via JSLIB bindings.&lt;/li&gt;
&lt;/ul&gt;
</content>
	</entry>
	
	<entry>
		<title>Framed</title>
		<link href="https://jmschrack.dev/posts/Framed/"/>
		<updated>2020-02-10T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/Framed/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https://jmschrack.dev/img/FramedBoseAR.png&quot; alt=&quot;alt text&quot; title=&quot;Framed Title Card&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Created by Craig Herndon, Jonathan Schrack, Michael Gilday, Scott Niejadlik&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Framed combines the Bose AR ecosystem with the spy genre to inspire action and enrich the real world with an engaging narrative. Players put on what appears to be a regular Bose device, only to discover they are now caught up in a thick plot between competing spy agencies. Player choices and reactions can change the outcome of the many encounters they will face.&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hheEyIiuwrM&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Find out more at the &lt;a href=&quot;https://playcrafting.com/bose-alliance/&quot;&gt;Playcrafting Website&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;tech-dive&quot;&gt;Tech Dive &lt;a class=&quot;direct-link&quot; href=&quot;#tech-dive&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
</content>
	</entry>
	
	<entry>
		<title>Mend</title>
		<link href="https://jmschrack.dev/posts/Mend/"/>
		<updated>2020-02-10T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/Mend/</id>
		<content type="html">&lt;p&gt;&lt;img src=&quot;https://jmschrack.dev/img/Mend_400x400.jpg&quot; alt=&quot;alt text&quot; title=&quot;Mend Title Card&quot;&gt;&lt;/p&gt;
&lt;p&gt;I am the main XR and Software Developer for Mend!&lt;br&gt;
Mend is a 2 player, asymetrical co-op game for VR.  It is designed by &lt;a href=&quot;http://jeplmr.com/&quot;&gt;Justin Palmer&lt;/a&gt; and was originally an Oculus LaunchPad title.&lt;br&gt;
I developed the core game systems built to Justin&#39;s specifications, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;an XR Interaction Rig we use that abstracts object usage logic away from the core VR camera rig.
&lt;ul&gt;
&lt;li&gt;&amp;quot;Grab &amp;amp; Pull&amp;quot; locomotion keyed to the hand controller update sequence for as smooth as possible movement&lt;/li&gt;
&lt;li&gt;Physics based object manipulation. (aka you can pick up things)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Extensive modifications to FMOD to allow dual speaker outputs so the VR player has their own localized audio that is distinct from the pancake player&lt;/li&gt;
&lt;li&gt;An input remapper built on top of Oculus&#39; OVRInput system to allow easy control customization&lt;/li&gt;
&lt;li&gt;Spatial dependent collision platforms!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Check out the first gameplay trailer here!&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/CKeRf5Wvzjg&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;h1 id=&quot;feature-highlight%3A-spatial-dependent-collision&quot;&gt;Feature Highlight: Spatial Dependent Collision &lt;a class=&quot;direct-link&quot; href=&quot;#feature-highlight%3A-spatial-dependent-collision&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I&#39;m really proud of this, and I want to explain more in depth.&lt;br&gt;
&lt;em&gt;&lt;strong&gt;Dictionary of Terms&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;VR Player&lt;/strong&gt; : the person wearing the VR headset. This is the &amp;quot;Owl sister&amp;quot; seen in screenshots and gameplay.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Flat Player&lt;/strong&gt; : the person using a controller and computer monitor and &lt;em&gt;no&lt;/em&gt; VR headset. This is the &amp;quot;Fox sister&amp;quot; seen in screenshots and gameplayer.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;inspiration&quot;&gt;Inspiration &lt;a class=&quot;direct-link&quot; href=&quot;#inspiration&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having invisible platforms is not a novel idea in video games. The logical progression is a tool or item that reveals the platforms.&lt;br&gt;
For an example from Super Mario Odyssey:&lt;br&gt;
&lt;img src=&quot;https://jmschrack.dev/img/smg_invisplat.gif&quot; alt=&quot;alt text&quot; title=&quot;SMG Invis Platform example&quot;&gt;&lt;/p&gt;
&lt;p&gt;The obvious use case for a 2 player game, is that Player1 controls the tool to reveal the platforms that Player2 has to use. However, it didn&#39;t mesh at first with our use case.&lt;/p&gt;
&lt;h2 id=&quot;the-twist&quot;&gt;The Twist &lt;a class=&quot;direct-link&quot; href=&quot;#the-twist&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;I really wish we could make the collisions operate the same way as the visuals. - &lt;em&gt;Justin Palmer&lt;/em&gt;, &lt;em&gt;Mend&#39;s Game Designer&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The core aspect that Justin wanted to have is that the players &lt;strong&gt;need&lt;/strong&gt; each other, and cannot complete the level without each other.&lt;br&gt;
We already accomplished this with platforms as The VR player is the only player that can move the platforms for the non-VR player to use.&lt;br&gt;
However, once the VR Player revealed the invisible platforms to the Flat Player, the Flat Player could just remember where to run and jump, removing agency from the VR Player as they just had nothing else to do.&lt;/p&gt;
&lt;p&gt;We already had a method of partially rendering platforms that were in range. I then took it one step further, and devised a method of controlling collisions for partials views as well. The Flat Player (and any other physics objects we want!) will now fall through any invisible sections in the geometry.&lt;/p&gt;
&lt;h1 id=&quot;the-result&quot;&gt;The result &lt;a class=&quot;direct-link&quot; href=&quot;#the-result&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;(animated gif showing partial collision dynamically with a bunch of boxes)&lt;/p&gt;
&lt;p&gt;Now the game really requires team work to complete!&lt;br&gt;
(animated gif showing Owl and Fox working in tandem to platform)&lt;/p&gt;
&lt;h1 id=&quot;more-about-mend&quot;&gt;More about Mend &lt;a class=&quot;direct-link&quot; href=&quot;#more-about-mend&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a class=&quot;twitter-timeline&quot; href=&quot;https://twitter.com/MendTheGame?ref_src=twsrc%5Etfw&quot;&gt;Tweets by MendTheGame&lt;/a&gt; &lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>An Idiot&#39;s Guide to running Eleventy on GitHub Pages.</title>
		<link href="https://jmschrack.dev/posts/SetupGuide/"/>
		<updated>2020-03-05T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/SetupGuide/</id>
		<content type="html">&lt;p&gt;When it comes to text tutorials, I prefer them overly verbose. So I&#39;m documenting my process of getting the Eleventy base blog for the next wandering programmer that might come by.&lt;br&gt;
I&#39;ve used Continuous Integation before, but never TravisCI. I&#39;ve used git and GitHub before, but never GitHub pages. And of course, I&#39;ve never used eleventy before now.&lt;br&gt;
The whole point of SSG is to enable you to just focus on the content of your website, and not the infrastructure. However, if you haven&#39;t used all of these components, guess what you&#39;re wasting time trying to figure out?&lt;br&gt;
So an &amp;quot;Idiot&#39;s Guide&amp;quot; is to enable anyone (not necessarily developers!) to do the bare minimum infrastructure set up in order to focus on the content.&lt;br&gt;
The only assumption is that you know commit&amp;amp;push to a git repo.&lt;/p&gt;
&lt;h2 id=&quot;what-is-this%3F&quot;&gt;What is this? &lt;a class=&quot;direct-link&quot; href=&quot;#what-is-this%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eleventy is a &amp;quot;Static Site Generator&amp;quot; that lets you type up pages in simple markdown, and then it generates all the html and CSS required.&lt;br&gt;
GitHub Pages will host static HTML websites based on a git repo.&lt;br&gt;
TravisCI will auto pull your latest code, build it, and deploy for you.&lt;br&gt;
All 3 of these together make for a straight forward website pipeline.&lt;/p&gt;
&lt;h2 id=&quot;get-node.js-(optional)&quot;&gt;Get Node.js (Optional) &lt;a class=&quot;direct-link&quot; href=&quot;#get-node.js-(optional)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Eleventy uses JavaScript and runs on Node.js.  TravisCI will handle all of this for us, and so you don&#39;t have to install node.js yourself.&lt;br&gt;
However, it&#39;s a good idea to do this so you can rapidly test changes on your local computer before pushing them live.&lt;/p&gt;
&lt;p&gt;You can download an installer for Node.js from &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;https://nodejs.org/en/download/&lt;/a&gt;. Let it do its thing.&lt;/p&gt;
&lt;h2 id=&quot;get-eleventy&quot;&gt;Get Eleventy &lt;a class=&quot;direct-link&quot; href=&quot;#get-eleventy&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;(From &lt;a href=&quot;https://www.11ty.dev/&quot;&gt;https://www.11ty.dev/&lt;/a&gt; )&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Open up Windows Powershell (or command prompt).&lt;/li&gt;
&lt;li&gt;run &amp;quot;npm install -g @11ty/eleventy&amp;quot;  (without quotes)&lt;/li&gt;
&lt;li&gt;Go to &lt;a href=&quot;https://github.com/11ty/eleventy-base-blog&quot;&gt;https://github.com/11ty/eleventy-base-blog&lt;/a&gt; and choose &amp;quot;Use This Template&amp;quot; button. Name your repo whatever you want, or leave the default name.&lt;/li&gt;
&lt;li&gt;On your freshly created/cloned GitHub repository, create a new branch called &amp;quot;dev&amp;quot; (Or whatever you want, all your work will be done here.)  If you want to set this up for a specific repo instead of your &amp;quot;User page&amp;quot;, call the branch &amp;quot;gh-pages&amp;quot;, and skip to step 6.&lt;/li&gt;
&lt;li&gt;On your github repo&#39;s settings, change the default branch to &amp;quot;dev&amp;quot; and rename your repo to &lt;em&gt;username&lt;/em&gt;.github.io&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;set-up-travisci-to-publish-your-github-repo&quot;&gt;Set up TravisCI to publish your GitHub repo &lt;a class=&quot;direct-link&quot; href=&quot;#set-up-travisci-to-publish-your-github-repo&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;6&quot;&gt;
&lt;li&gt;Go to &lt;a href=&quot;https://travis-ci.org/getting_started&quot;&gt;https://travis-ci.org/getting_started&lt;/a&gt; , sign in with github. If you&#39;re feeling lazy, just activate Travis for all repositories.&lt;/li&gt;
&lt;li&gt;On GitHub, go to your profile Settings&amp;gt;Developer Settings&amp;gt;Personal Access Tokens, and create a new personal access token for TravisCI with the &amp;quot;Repo&amp;quot; permissions. &lt;strong&gt;Copy the key!&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Go to TravisCI and navigate to your repository, and go to the settings for it. Create a new EnvironmentVariable called &amp;quot;GITHUB_TOKEN&amp;quot;, paste the Access Token you copied in here and click &amp;quot;Add&amp;quot;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;publish-your-page-for-the-first-time&quot;&gt;Publish your page for the first time &lt;a class=&quot;direct-link&quot; href=&quot;#publish-your-page-for-the-first-time&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol start=&quot;9&quot;&gt;
&lt;li&gt;If you are not using the User page (i.e. you skipped step 5 above), just change the &amp;quot;pathprefix&amp;quot; in .travis.yml to point to your repo&#39;s name. Otherwise, edit your .travis.yml and change it to the following.:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;language: node_js
node_js:
  - 8
before_script:
  - npm install @11ty/eleventy -g
script: eleventy --pathprefix=&amp;quot;/&amp;quot;
deploy:
  local-dir: _site
  provider: pages
  skip-cleanup: true
  github-token: $GITHUB_TOKEN  # Set in travis-ci.org dashboard, marked secure
  keep-history: true
  target_branch: master
  on:
    branch: dev
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This tells TravisCI to pull from the dev branch, and deploy to the master branch.&lt;br&gt;
10. Commit and push your changes now. Go back to TravisCI and watch your build begin.&lt;br&gt;
11. Once Travis finishes, go to your &lt;a href=&quot;http://github.com/&quot;&gt;GitHub.com&lt;/a&gt; repo&#39;s settings, scroll down to find the &amp;quot;GitHub Pages&amp;quot; section. If everything worked, you&#39;ll be given a link that points to &lt;em&gt;username&lt;/em&gt;.github.io !&lt;/p&gt;
&lt;p&gt;The first time, I got an &amp;quot;Unknown Tag&amp;quot; error. I don&#39;t know what caused it, but doing a second build on Jenkins fixed it.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Unleash the power of WebGL and Unity</title>
		<link href="https://jmschrack.dev/posts/UnityWebGL/"/>
		<updated>2020-07-20T00:00:00+00:00</updated>
		<id>https://jmschrack.dev/posts/UnityWebGL/</id>
		<content type="html">&lt;p&gt;&lt;a href=&quot;https://docs.unity3d.com/Manual/webgl-interactingwithbrowserscripting.html&quot;&gt;Here&#39;s Unity&#39;s current documentation on interacting with Javascript&lt;/a&gt;&lt;br&gt;
This covers basic function calling and marshalling strings, but what about callbacks? If you&#39;ve ever used Javascript, you know how much it loves callbacks. Unfortunately at the time of writing, there isn&#39;t any good documentation on how to work with javascript callbacks inside of Unity&#39;s WebGL builds with C#. So let&#39;s fix that.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you&#39;re coming from Unity and C# with little Javascript experience, you might have heard callbacks referred to as &amp;quot;delegates&amp;quot; or &amp;quot;Actions.&amp;quot;  Still not ringing a bell?  If you&#39;ve used a UI button in Unity, the &amp;quot;OnClick&amp;quot; field is a callback!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;topics&quot;&gt;Topics &lt;a class=&quot;direct-link&quot; href=&quot;#topics&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#pass-a-c%23-callback-to-javascript&quot;&gt;Pass a C# callback to Javascript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#pass-a-javascript-callback-to-c%23&quot;&gt;Pass a Javascript callback to C#&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#call-external-javascript-on-the-web-page&quot;&gt;Call external Javascript on the web page.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#creating-global-hooks-for-external-javascript-to-use&quot;&gt;Creating global hooks for external Javascript to use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#wrapping-up&quot;&gt;Common Pitfalls&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Web browsers only run Javascript or WebASM.  However, in Unity we code in C# which then gets compiled and converted to WebASM, and in order to avoid confusion, I&#39;ll often refer to things as C# instead of WebASM.&lt;/p&gt;
&lt;h1 id=&quot;pass-a-c%23-callback-to-javascript&quot;&gt;Pass a C# callback to Javascript &lt;a class=&quot;direct-link&quot; href=&quot;#pass-a-c%23-callback-to-javascript&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;h2 id=&quot;on-the-c%23-side&quot;&gt;On the C# side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-c%23-side&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is pretty straight forward for C# as the runtime will automatically marshal data for us.  &amp;quot;Marshalling&amp;quot; is the term for converting the data to another format and is necessary as we pass data from C# (technically WebASM) to Javascript and back.  Effectively, these two languages are isolated from each other in memory, but Interops allows these two transfer data and execution to and from each other.&lt;/p&gt;
&lt;p&gt;Let&#39;s look at a C# sample:&lt;br&gt;
(JSAPI.cs)&lt;/p&gt;
&lt;pre class=&quot;language-csharp&quot;&gt;&lt;code class=&quot;language-csharp&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;System&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;InteropServices&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;token namespace&quot;&gt;AOT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;JSAPI&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    
    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;DllImport&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;__Internal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;Action&lt;/span&gt; callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;MonoPInvokeCallback&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token type-expression class-name&quot;&gt;Action&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;DefaultCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token comment&quot;&gt;//This fires from javascript&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;YourMethod&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;JSExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;DefaultCallback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let&#39;s break this down:&lt;br&gt;
We declare our Javascript function called &amp;quot;JSExample&amp;quot;  as taking an &amp;quot;Action&amp;quot; reference. This is our function pointer that will get passed to Javascript.&lt;/p&gt;
&lt;p&gt;We then declare a &lt;strong&gt;static&lt;/strong&gt; function and mark it with &lt;code&gt;[MonoPInvokeCallback(typeof(Action))]&lt;/code&gt; which as you can probably guess, will tell the compiler to generate a function pointer that matches type &amp;quot;Action&amp;quot;.  &lt;em&gt;(Why do we use a static callback function? We&#39;ll get to that later.)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Lastly, we can then call the Javascript function and pass in our static callback.&lt;/p&gt;
&lt;h2 id=&quot;on-the-javascript-side&quot;&gt;On the Javascript side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-javascript-side&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is where things start to get tricky. Fortunately, it&#39;s a lot of boilerplate code.&lt;/p&gt;
&lt;p&gt;First off, to call a C# function from a Javascript function you want to use:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dynCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;signature&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;functionPtr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;arguments&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;signature&lt;/strong&gt;: (string) return type followed by each argument type.&lt;/p&gt;
&lt;p&gt;v - void&lt;br&gt;
i - int&lt;br&gt;
f - float&lt;br&gt;
d - double&lt;/p&gt;
&lt;p&gt;example:&lt;br&gt;
&lt;em&gt;public static void SomeCallback(int id, string data)&lt;/em&gt;&lt;br&gt;
has the signature string:&lt;br&gt;
&lt;em&gt;&amp;quot;vii&amp;quot;&lt;/em&gt;&lt;br&gt;
(Why do string parameters use int? Because we copy the string to C# memory and then pass the pointer in. C# will auto-marshal this as a string for us!)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;functionPtr&lt;/strong&gt;: the C# function we want to call&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;arguments&lt;/strong&gt;: (array) the parameters to pass to the C# function&lt;/p&gt;
&lt;p&gt;In practice, it looks like this:&lt;br&gt;
(example.jslib)&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myLib&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    $dependencies&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;JSExample&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;functionPtr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dynCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;v&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;functionPtr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;autoAddDeps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myLib&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;$dependencies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mergInto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LibraryManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;library&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;myLib&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;Sanity Check:  Your Javascript function name must match what you called your static extern function in C#, in this case &amp;quot;JSExample&amp;quot;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Seems simple so far?&lt;/p&gt;
&lt;h1 id=&quot;pass-a-javascript-callback-to-c%23&quot;&gt;Pass a Javascript callback to C# &lt;a class=&quot;direct-link&quot; href=&quot;#pass-a-javascript-callback-to-c%23&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This could be a bit hacky. Unity uses &amp;quot;Emscripten&amp;quot; as part of it&#39;s toolchain to convert your C# to WASM. As of Jan2019, a helper function was added to Emscripten that wraps a Javascript function as invokable method pointers. However, depending on your version of Unity, you may or may not have that update. We&#39;ll cover that first, but if you are stuck on an older version, we&#39;ll cover how to DIY your own workaround.&lt;/p&gt;
&lt;h2 id=&quot;on-the-javascript-side-(emscripten-v1.38.26-or-higher)&quot;&gt;On the Javascript side (Emscripten v1.38.26 or higher) &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-javascript-side-(emscripten-v1.38.26-or-higher)&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This will look similar to what we did above.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsFunction&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;signature&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;IntPtr&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;jsFunction&lt;/strong&gt;: (function) The Javascript function you want to wrap as a C# method.&lt;br&gt;
&lt;strong&gt;signature&lt;/strong&gt;: (string) return type followed by each argument type. This follows the same rules as dynCall mentioned above.&lt;br&gt;
&lt;strong&gt;return:IntPtr&lt;/strong&gt;: (int) the invokable pointer we can pass to C#.&lt;/p&gt;
&lt;p&gt;In practice, looks like this:&lt;br&gt;
(example.jslib)&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;//adding this after JSExample above&lt;/span&gt;

    &lt;span class=&quot;token function-variable function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Received a callback!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; ptr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;addFunction&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;v&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; ptr&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;on-the-c%23-side-2&quot;&gt;On the C# side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-c%23-side-2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;It&#39;s also pretty straightforward on the C# side if you let it auto-marshal the pointer as a delegate.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;DllImport&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;__Internal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExampleUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Action&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Invoke&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can also manually marshal it:&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;DllImport&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;__Internal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;IntPtr&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetJSCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;IntPtr&lt;/span&gt; ptr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;Action&lt;/span&gt; a&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Marshal&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token generic-method&quot;&gt;&lt;span class=&quot;token function&quot;&gt;GetDelegateForFunctionPointer&lt;/span&gt;&lt;span class=&quot;token generic class-name&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;Action&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;ptr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;on-the-unity-side&quot;&gt;On The Unity side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-unity-side&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you immediately tried to Build and run using your brand new JS Callbacks, you&#39;ll get a javascript error. Something along the lines of &amp;quot;Could not find function&amp;quot; or &amp;quot;ran out of table space&amp;quot;  in regards to the &amp;quot;addFunction&amp;quot; command. Emscripten keeps an internal table that maps C# delegates to Javascript functions, and by default this is created at build time and is unchangable. So we have to supply a custom argument to the Emscripten tool to enable runtime usage of &#39;addFunction.&#39;&lt;/p&gt;
&lt;p&gt;Create an Editor script and add these lines to it.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;MenuItem&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Tools/Set WebGL Args&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetWebGLArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    PlayerSettings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebGL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;emscriptenArgs&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-s ALLOW_TABLE_GROWTH&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;MenuItem&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Tools/Unset WebGL Args&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;SetWebGLArgs&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    PlayerSettings&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;WebGL&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;emscriptenArgs&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will add a &amp;quot;Tools&amp;quot; submenu to Unity and allow you to change the WebGL arguments sent to Emscripten.&lt;br&gt;
Just run &amp;quot;Tools/Set WebGL Args&amp;quot; once and that&#39;s it. Now you should be able to build and use the AddFunction command&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you fail to build with a &amp;quot;FILE NOT FOUND &#39;ALLOW_TABLE_GROWTH&#39;&amp;quot; error, that means you are on an older version of Emscripten that does not have this ability. Don&#39;t panic.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;pass-a-javascript-callback-to-c%23-(older-versions-of-emscripten)&quot;&gt;Pass a Javascript callback to C# (Older versions of Emscripten) &lt;a class=&quot;direct-link&quot; href=&quot;#pass-a-javascript-callback-to-c%23-(older-versions-of-emscripten)&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;As mentioned before, Emscripten keeps an internal table of what C# delegates map to which Javascript functions. Unfortunately if you are on an older version of Emscripten, you can&#39;t add to this table dynamically. There is an easy, if less elegant, solution:  write our own lookup table in Javascript.&lt;/p&gt;
&lt;p&gt;We simply create an array in Javascript, store our would-be Javascript functions, pass their index to C#, and then call a Javascript function with that index which fires the JS callback for us.&lt;/p&gt;
&lt;h2 id=&quot;on-the-c%23-side-3&quot;&gt;On the C# side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-c%23-side-3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is going to be almost identical to earlier, with the exception of an additional extern function we use for Invoking.&lt;/p&gt;
&lt;pre class=&quot;language-cs&quot;&gt;&lt;code class=&quot;language-cs&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;DllImport&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;__Internal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token attribute&quot;&gt;&lt;span class=&quot;token class-name&quot;&gt;DllImport&lt;/span&gt;&lt;span class=&quot;token attribute-arguments&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;__Internal&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;InvokeCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; cb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token return-type class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;ExampleUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;int&lt;/span&gt;&lt;/span&gt; cb&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;//do something.....&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;InvokeCallback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cb&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;on-the-javascript-side-2&quot;&gt;On the Javascript side &lt;a class=&quot;direct-link&quot; href=&quot;#on-the-javascript-side-2&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We&#39;re going to make use of Emscripten&#39;s &amp;quot;__postset&amp;quot; command, which will emit a string directly into&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;JSCallbackExample__postset&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;var cbIDs=[];&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token function-variable function&quot;&gt;JSCallbackExample&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Received a callback!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; id&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cbIDs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; id&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token function-variable function&quot;&gt;InvokeCallback&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;cb&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; callback&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cbIDs&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;cb&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;call-external-javascript-on-the-web-page&quot;&gt;Call external Javascript on the web page &lt;a class=&quot;direct-link&quot; href=&quot;#call-external-javascript-on-the-web-page&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This is probably the easiest thing here. Your JSLibs are still JavaScript running in a web browser which means they follow normal conventions. As long as the external JS library you want to use is declared in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag before the script tag that loads your UnityInstance, it will be accessible.&lt;/p&gt;
&lt;p&gt;(index.html)&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;TestExternalJS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;I&#39;m your external function!&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(example.jslib)&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; myLib&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    $dependencies&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token function-variable function&quot;&gt;CallExternal&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;token function&quot;&gt;TestExternalJS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;autoAddDeps&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;myLib&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;$dependencies&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token function&quot;&gt;mergInto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;LibraryManager&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;library&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;myLib&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;creating-global-hooks-for-external-javascript-to-use&quot;&gt;Creating global hooks for external Javascript to use &lt;a class=&quot;direct-link&quot; href=&quot;#creating-global-hooks-for-external-javascript-to-use&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;This last part is a combination of everything we&#39;ve learned so far.  There are many ways to handle this; this is just my preferred style&lt;/p&gt;
&lt;p&gt;We create a new script tag to hold a global object. We give the tag an id for easy access later and a &amp;quot;isLoaded&amp;quot; variable for checking.&lt;/p&gt;
&lt;pre class=&quot;language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&quot;token attr-name&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;token attr-value&quot;&gt;&lt;span class=&quot;token punctuation attr-equals&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;UnityHooks&lt;span class=&quot;token punctuation&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token script&quot;&gt;&lt;span class=&quot;token language-javascript&quot;&gt;
&lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; UnityHooks&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    isLoaded&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In our JSLib, we add functions to our global object.  It&#39;s a good idea to marshal and cache any data you need.   We finish by setting isLoaded to true, and firing a &amp;quot;loaded&amp;quot; event on the script tag itself.  This will allow any external APIs that depend on our Unity hooks to use the standard EventListener system&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function-variable function&quot;&gt;SetUpHooks&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;callback&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
        UnityHooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cb&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;callback&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        UnityHooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;TestCallback&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; bufferSize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;lengthBytesUTF8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token keyword&quot;&gt;var&lt;/span&gt; buffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;_malloc&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;bufferSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;token function&quot;&gt;stringToUTF8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;text&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; buffer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; bufferSize&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
            Runtime&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dynCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;vi&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;UnityHooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;cb&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
        UnityHooks&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;isLoaded&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
        document&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;UnityHooks&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;dispatchEvent&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Event&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loaded&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up &lt;a class=&quot;direct-link&quot; href=&quot;#wrapping-up&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;I believe this covers the missing edge cases in the official Unity documentation. Here&#39;s a few common pitfalls I&#39;ve run across that are worth mentioning.&lt;/p&gt;
&lt;h2 id=&quot;scope-and-closures&quot;&gt;Scope and Closures &lt;a class=&quot;direct-link&quot; href=&quot;#scope-and-closures&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A pointer to a string passed in as a parameter will get included as the local scope of a closure.  However, the string this pointer refers to may not!  You should marshal any data you need before creating a closure in Javascript.&lt;/p&gt;
&lt;h2 id=&quot;what-about-passing-objects%3F&quot;&gt;What about passing objects? &lt;a class=&quot;direct-link&quot; href=&quot;#what-about-passing-objects%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;While it is possible, it is a lot of extra work on the Javascript side as there is no automatic Marshalling in Javascript. In C#, you have to use a &amp;quot;struct&amp;quot; with Explicit layout instead of a &amp;quot;class&amp;quot; when you want to pass data to and from Javascript. In Javascript, you&#39;ll have to read/write bytes to a data buffer manually to recreate the data object.&lt;br&gt;
&lt;strong&gt;OR&lt;/strong&gt;&lt;br&gt;
You could just use JSON to easily convert your object(s) to a string and then pass it across. Nice and easy as both Javascript and UnityC# have built in JSON parsers, but this comes at the cost of some extra memory.&lt;/p&gt;
&lt;h2 id=&quot;using-non-static-callbacks&quot;&gt;Using non-static callbacks &lt;a class=&quot;direct-link&quot; href=&quot;#using-non-static-callbacks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So remember earlier when we passed a static C# callback to Javascript?  That&#39;s a bit inconvenient. What if we just used a non-static callback?&lt;br&gt;
You&#39;ll get the this error in your Javscript console:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;NotSupportedException: IL2CPP does not support marshaling delegates that point to instance methods to native code.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you must use static delegates.  However, you can create a look up table to cache these local delegates and just pass an ID value and a static delegate to the Javascript.  This is the exact same logic we used in &lt;a href=&quot;#pass-a-javascript-callback-to-c%23-(older-versions-of-emscripten)&quot;&gt;Pass a Javascript callback to C# (Older versions of Emscripten)&lt;/a&gt; except now you handle it on the C# side instead of the Javascript side.&lt;/p&gt;
&lt;p&gt;I wrote a simple &lt;a href=&quot;https://gist.github.com/jmschrack/4d1451a0914f210cbe481bcf176891ea&quot;&gt;ActionLookUpTable gist on Github&lt;/a&gt; that will work for general Interops. It was built with multi-threading in mind, but it won&#39;t compile on WebGL unless you remove the System.Threading imports. However, multi-threading isn&#39;t an issue on WebGL so it&#39;s an easy remove.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;
</content>
	</entry>
</feed>
